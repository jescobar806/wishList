// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_Role {
  Estudiante
  Lider
  Administrador
}

enum Enum_EstadoUser {
  Pendiente
  Autorizado
  NoAutorizado
}

enum Enum_wishType {
  Nuevo
  Error
}

enum Enum_wishState {
  DeseoValidado
  DeseoEnProceso
  DeseoConSolicitud
  DeseoFinalizado
  DeseoVersionado
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  telefono           String?
  rol                Enum_Role        @default(Administrador)
  estado             Enum_EstadoUser @default(Autorizado)
  createWhishes      Wish[]
  accounts           Account[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wish {
  id            String              @id @default(cuid())
  name        String
  description   String              @default("sin descripcion")
  createDate    DateTime
  author        User                @relation(fields: [UserId], references: [id])
  UserId        String
  type          Enum_wishType
  state         Enum_wishState
  system        System          @relation(fields: [systemId], references: [id])
  systemId      String
  module        Module          @relation(fields: [moduleId], references: [id])
  moduleId      String
  option        Option          @relation(fields: [optionId], references: [id])
  optionId      String
}

model System {
  id          String            @id @default(cuid())
  description String
  module      Module          @relation(fields: [moduleId], references: [id])
  moduleId    String
  wish        Wish?
}

model Module {
  id          String            @id @default(cuid())
  description String
  system      System[]
  option      Option          @relation(fields: [optionId], references: [id])
  optionId    String
  wish        Wish?
}

model Option {
  id          String            @id @default(cuid())
  description String
  module      Module[]
  wish        Wish?
}

